name: Build and deploy

on:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:

  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Checkout submodules
        run: git submodule update --init --force --recursive --remote

      - name: Install latest stable
        uses: actions-rs/toolchain@v1
        with:
          override: true
          toolchain: stable
      - name: Install Protoc
        uses: arduino/setup-protoc@v1

        # Restore cache
      - name: Restore cargo packages
        uses: actions/cache@v3
        env:
          cache-name: cache-cargo-registry
        with:
          path: "~/.cargo/"
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          restore-keys: ${{ runner.os }}-build-${{ env.cache-name }}
      - name: Restore build product
        uses: actions/cache@v3
        env:
          cache-name: cache-build-product
        with:
          path: "./target/"
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('./Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-

        # Build
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --all-features

  push:
    needs: build
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/master' &&
      github.repository == 'SIT-kite/kite-server'

    steps:
      - name: Restore build product
        uses: actions/cache@v3
        env:
          cache-name: cache-build-product
        with:
          path: "./target/"
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('./Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-
      - name: Strip binary file
        run: |
          strip -s target/release/loader
          ls target/release -lh | grep 'loader$' | awk '{print "Binary size is", $5, "after strip" }'
          cp target/release/loader kite-server-v3

      - name: Copy file via SSH
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          port: ${{ secrets.SERVER_PORT }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_SECRET }}
          source: kite-server-v3
          target: ${{ secrets.DEPLOY_PATH }}/kite-server-v3.tmp
      - name: Deploy & Restart via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          port: ${{ secrets.SERVER_PORT }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_SECRET }}
          script: |
            cp ${{ secrets.DEPLOY_PATH }}/kite-server-v3 ${{ secrets.DEPLOY_PATH }}/kite-server-v3.bak
            systemctl stop kite3.service
            mv ${{ secrets.DEPLOY_PATH }}/kite-server-v3.tmp ${{ secrets.DEPLOY_PATH }}/kite-server-v3
            systemctl start kite3.service

  notification:
    runs-on: ubuntu-latest
    needs: [ push ]
    if: |
      github.event_name != 'pull_request' &&
      github.repository == 'SIT-kite/kite-server' &&
      always()
    steps:
      - uses: technote-space/workflow-conclusion-action@v2
      - uses: nelonoel/branch-name@v1.0.1
      - uses: benjlevesque/short-sha@v2.1
        id: short-sha
        with: { length: 7 }

      - name: ðŸ¤– Build Result Notification
        uses: appleboy/telegram-action@v0.1.1
        with:
          to: ${{ secrets.CHANNEL_CHAT_ID }}
          token: ${{ secrets.BOT_TOKEN }}
          format: markdown
          message: |
            The result to ðŸŽ‰the deployment of kite-server (*${{ env.BRANCH_NAME }}*): *${{ env.WORKFLOW_CONCLUSION }}*
            By *${{ github.actor }}*. Commit message:
            *${{ github.event.head_commit.message }}*
